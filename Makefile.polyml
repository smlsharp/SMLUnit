
POLYML         ?= poly
POLYMLC        ?= polyc
POLYMLFLAGS    ?= -q --error-exit --eval 'PolyML.suffixes := ".sig"::(!PolyML.suffixes)'

PREFIX         ?= /usr/local

SRC            := $(wildcard src/main/*)
TEST_SRC       := $(wildcard src/test/*)
BASIS_TEST_SRC := $(wildcard ./basis/test/*)
EXAMPLE_SRC    := $(wildcard ./example/*)

TARGET         := libsmlunit.poly
TEST           := smlunit-test-poly smlunit-basis-test-poly
EXAMPLE        := smlunit-example-poly


all: $(TARGET) test


$(TARGET): $(SRC)
	@echo "  [POLYML] $@"
	@echo "" | $(POLYML) $(POLYMLFLAGS) \
		--eval 'PolyML.make "src/main"' \
		--use export.sml \
		--eval 'PolyML.SaveState.saveModule ("$(TARGET)", SMLUnit)'


smlunit-test-poly.o: $(TARGET) $(TEST_SRC)
	@echo "  [POLYML] $@"
	@echo "" | $(POLYML) $(POLYMLFLAGS) \
		--eval 'PolyML.loadModule "./$(TARGET)"' \
		--eval 'PolyML.make "src/test"' \
		--eval 'PolyML.export ("$(@:.o=)", TestMain.test)'


smlunit-basis-test-poly.o: $(TARGET) $(BASIS_TEST_SRC)
	@echo "  [POLYML] $@"
	@echo "" | $(POLYML) $(POLYMLFLAGS) \
		--eval 'PolyML.loadModule "./$(TARGET)"' \
		--eval 'PolyML.make "basis/test"' \
		--eval 'PolyML.export ("$(@:.o=)", TestMain.test)'


$(EXAMPLE).o: $(TARGET) $(EXAMPLE_SRC)
	@echo "  [POLYML] $@"
	@echo "" | $(POLYML) $(POLYMLFLAGS) \
		--eval 'PolyML.loadModule "./$(TARGET)"' \
		--eval 'PolyML.make "example"' \
		--eval 'PolyML.export ("$(@:.o=)", Main.main'\'')'


$(TEST) $(EXAMPLE): %: %.o
	@echo "  [POLYC] $@"
	@$(POLYMLC) -o $@ $^


.PHONY: example
example: $(EXAMPLE)
	./$(EXAMPLE)


.PHONY: install
install: $(TARGET)
	@[ -e $(PREFIX)/polyml/lib ] || mkdir $(PREFIX)/polyml/lib
	install -D -m 644 -t $(PREFIX)/polyml/lib $(TARGET)


.PHONY: test
test: $(TEST)
	./smlunit-test-poly
	./smlunit-basis-test-poly


.PHONY: clean
clean:
	-$(RM) $(TARGET)
	-$(RM) $(TEST)
	-$(RM) $(TEST:=.o)
	-$(RM) $(EXAMPLE)
	-$(RM) $(EXAMPLE:=.o)

